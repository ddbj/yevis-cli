use std::path::PathBuf;
use structopt::{clap, StructOpt};

#[derive(StructOpt, Debug)]
#[structopt(
    name = env!("CARGO_PKG_NAME"),
    version = env!("CARGO_PKG_VERSION"),
    author = env!("CARGO_PKG_AUTHORS"),
)]
#[structopt(setting(clap::AppSettings::ColoredHelp))]
pub enum Args {
    /// Generates a configuration file template for yevis from a workflow document.
    MakeTemplate {
        /// Remote location of the workflow's main document file (only hosted on GitHub).
        workflow_location: String,

        /// Path to the output file.
        #[structopt(short, long, parse(from_os_str), default_value = "yevis.yml")]
        output: PathBuf,

        /// Format of the output file (`yaml` or `json`).
        #[structopt(short, long, default_value = "yaml")]
        format: String,
    },

    /// Validate the schema and contents of the configuration file.
    Validate {
        /// Configuration file generated by `make-template` command.
        #[structopt(parse(from_os_str), default_value = "yevis.yml")]
        config_file: PathBuf,
    },

    /// Actually, test the workflow based on the configuration file.
    Test {
        /// Configuration file generated by `make-template` command.
        #[structopt(parse(from_os_str), default_value = "yevis.yml")]
        config_file: PathBuf,

        /// Location of WES in which to run the test.
        /// If not specified, `sapporo-service` will be started.
        #[structopt(short, long)]
        wes_location: Option<String>,

        /// Location of the docker host.
        #[structopt(short, long, default_value = "unix:///var/run/docker.sock")]
        docker_host: String,
    },

    /// After validating and testing, create a pull request to `ddbj/yevis-workflows`.
    PullRequest {
        /// Configuration file generated by `make-template` command.
        #[structopt(parse(from_os_str))]
        config_file: PathBuf,

        /// GitHub repository to send pull requests to.
        #[structopt(short, long, default_value = "ddbj/yevis-workflows")]
        repository: String,

        /// Location of WES in which to run the test.
        /// If not specified, `sapporo-service` will be started.
        #[structopt(short, long)]
        wes_location: Option<String>,

        /// Location of the docker host.
        #[structopt(short, long, default_value = "unix:///var/run/docker.sock")]
        docker_host: String,
    },
}
